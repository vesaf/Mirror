#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
var ip = require('ip');
var exec = require('child_process').exec;
var fs = require('fs');

// Extract command line arguments
if (process.argv[2] == "dev") {
  var development = true;
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var IPv4 = ip.address();
console.log("Port:", IPv4 + ":8080");
server.listen(8080, IPv4, function () {
  // Open browser when on linux
  if (process.platform === "linux" && !development) {
    function puts(error, stdout, stderr) { 
      if (error) {
        fs.writeFile("home/pi/Documents/error.txt", error, function() {});
      }
      else {
        fs.writeFile("home/pi/Documents/error.txt", stdout, function () {});
      }
      console.log(stdout) 
    }
    exec("chromium-browser --kiosk http://" + IPv4 + ":8080", puts);
  }
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
